syntax = "proto3";

package discord;

service Handshake {
  rpc DoHandshake (HandshakeRequest) returns (HandshakeReply);
}

service StatusChannel {
  rpc Update (ContentRequest) returns (ContentResponse);
}

service ConnectUserChannel {
  rpc TryConnect (SendConnectionCodeRequest) returns (SendConnectionCodeResponse);
}

service PrivateMessagesChannels {
  rpc ReceivedPrivateMessage (SendPrivateMessageRequest) returns (SendPrivateMessageResponse);
}

service Messaging {
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);
  rpc SendFile (SendFileRequest) returns (SendFileResponse);
  rpc SendMessageToUser (SendMessageToUserRequest) returns (SendMessageToUserResponse);
}

service Commands {
  rpc SendTextBasedCommand (SendTextBasedCommandRequest) returns (SendTextBasedCommandResponse);
}

message Header {
  int32 version = 1;
}

message HandshakeRequest {
  Header header = 1;
  string message = 2;
}

message HandshakeReply {
  Header header = 1;
  string message = 2;
}

message ContentRequest {
  Header header = 1;
}

message ContentResponse {
  Header header = 1;
  string message = 2;
}

message SendConnectionCodeRequest {
  Header header = 1;
  string code = 2;
  uint64 userId = 3;
}

message SendConnectionCodeResponse {
  Header header = 1;
  bool success = 2;
  string message = 3;
}

message SendMessageRequest {
  Header header = 1;
  uint64 channelId = 2;
  string message = 3;
}

message SendMessageResponse {
  Header header = 1;
  bool success = 2;
  uint64 messageId = 3;
}

message SendFileRequest {
  Header header = 1;
  uint64 channelId = 2;
  bytes file = 3;
  string fileName = 4;
  string message = 5;
}

message SendFileResponse {
  Header header = 1;
  bool success = 2;
  uint64 messageId = 3;
}

message SendMessageToUserRequest {
  Header header = 1;
  uint64 userId = 2;
  string message = 3;
}

message SendMessageToUserResponse {
  Header header = 1;
  bool success = 2;
  uint64 messageId = 3;
}

message SendPrivateMessageRequest {
  Header header = 1;
  uint64 userId = 2;
  uint64 messageId = 3;
  string message = 4;
}

message SendPrivateMessageResponse {
  Header header = 1;
  bool success = 2;
}

message SendTextBasedCommandRequest {
  Header header = 1;
  uint64 channelId = 2;
  uint64 userId = 3;
  string command = 4;
}

message SendTextBasedCommandResponse {
  Header header = 1;
  bool success = 4;
}