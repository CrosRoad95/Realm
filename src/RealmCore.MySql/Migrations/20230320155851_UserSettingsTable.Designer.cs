// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealmCore.MySql;

#nullable disable

namespace RealmCore.Persistence.MySql.Migrations
{
    [DbContext(typeof(MySqlDb))]
    [Migration("20230320155851_UserSettingsTable")]
    partial class UserSettingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Achievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<bool>("PrizeReceived")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "AchievementId");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.Property<string>("Serial")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bans", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DailyVisits", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("VisitsInRow")
                        .HasColumnType("int");

                    b.Property<int>("VisitsInRowRecord")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("DailyVisits", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscordIntegration", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("UserId");

                    b.ToTable("DiscordIntegration", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Discovery", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DiscoveryId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DiscoveryId");

                    b.ToTable("Discoveries", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Fraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Fractions", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.FractionMember", b =>
                {
                    b.Property<int>("FractionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("FractionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FractionMembers", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte?>("Kind")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Shortcut")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Shortcut")
                        .IsUnique();

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupMember", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("Size")
                        .HasColumnType("int unsigned");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<uint>("ItemId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Number")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryItems", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobStatistics", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("JobId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<ulong>("Points")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TimePlayed")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("UserId", "JobId", "Date");

                    b.ToTable("JobPoints", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short>("JobId")
                        .HasColumnType("smallint");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "JobId", "UpgradeId");

                    b.ToTable("JobUpgrades", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Experience")
                        .HasColumnType("int unsigned");

                    b.Property<string>("LastIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogindDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastSerial")
                        .HasColumnType("longtext");

                    b.Property<string>("LastTransformAndMotion")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<uint>("Level")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Nick")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("PlayTime")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("RegisterIp")
                        .HasColumnType("longtext");

                    b.Property<string>("RegisterSerial")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RegisteredDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<short>("Skin")
                        .HasColumnType("smallint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLicense", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SuspendedUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "LicenseId");

                    b.ToTable("UserLicenses", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserReward", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RewardId");

                    b.ToTable("UserRewards", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "SettingId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserStat", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("UserId", "StatId");

                    b.ToTable("UserStats", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUpgrade", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpgradeId");

                    b.ToTable("UserUpgrade", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("{\"Color1\":\"White\",\"Color2\":\"White\",\"Color3\":\"White\",\"Color4\":\"White\",\"HeadLightColor\":\"White\"}");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DamageState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("{\"FrontLeftPanel\":0,\"FrontRightPanel\":0,\"RearLeftPanel\":0,\"RearRightPanel\":0,\"Windscreen\":0,\"FrontBumper\":0,\"RearBumper\":0,\"Hood\":0,\"Trunk\":0,\"FrontLeftDoor\":0,\"FrontRightDoor\":0,\"RearLeftDoor\":0,\"RearRightDoor\":0,\"FrontLeftLight\":0,\"FrontRightLight\":0,\"RearRightLight\":0,\"RearLeftLight\":0}");

                    b.Property<string>("DoorOpenRatio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("{\"Hood\":0.0,\"Trunk\":0.0,\"FrontLeft\":0.0,\"FrontRight\":0.0,\"RearLeft\":0.0,\"RearRight\":0.0}");

                    b.Property<bool>("EngineState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<float>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1000f);

                    b.Property<bool>("IsFrozen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("LandingGearDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<bool>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<float>("Mileage")
                        .HasColumnType("float");

                    b.Property<ushort>("Model")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("OverrideLights")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("Paintjob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)3);

                    b.Property<string>("Platetext")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Removed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("SirensState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Spawned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TaxiLightState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TransformAndMotion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasDefaultValue("{\"Position\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Rotation\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Interior\":0,\"Dimension\":0,\"Velocity\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"AngularVelocity\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0}}");

                    b.Property<string>("Variant")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("{\"Variant1\":255,\"Variant2\":255}");

                    b.Property<string>("WheelStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("{\"FrontLeft\":0,\"RearLeft\":0,\"FrontRight\":0,\"RearRight\":0}");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("{\"Ownership\":false}");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAccesses", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEngine", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<short>("EngineId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Selected")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("VehicleId", "EngineId");

                    b.ToTable("VehicleEngines", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleFuel", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<float>("FuelConsumptionPerOneKm")
                        .HasColumnType("float");

                    b.Property<float>("MaxCapacity")
                        .HasColumnType("float");

                    b.Property<float>("MinimumDistanceThreshold")
                        .HasColumnType("float");

                    b.HasKey("VehicleId", "FuelType");

                    b.ToTable("VehicleFuels", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehiclePartDamage", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<short>("PartId")
                        .HasColumnType("smallint");

                    b.Property<float>("State")
                        .HasColumnType("float");

                    b.HasKey("VehicleId", "PartId");

                    b.ToTable("VehiclePartDamages", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUpgrade", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "UpgradeId");

                    b.ToTable("VehicleUpgrades", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Achievement", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Ban", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DailyVisits", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithOne("DailyVisits")
                        .HasForeignKey("RealmCore.Persistence.Data.DailyVisits", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscordIntegration", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithOne("DiscordIntegration")
                        .HasForeignKey("RealmCore.Persistence.Data.DiscordIntegration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Discovery", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Discoveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.FractionMember", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Fraction", "Fraction")
                        .WithMany("Members")
                        .HasForeignKey("FractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("FractionMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fraction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupMember", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Inventory", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryItem", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Inventory", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobStatistics", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("JobStatistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobUpgrade", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("JobUpgrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLicense", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Licenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserReward", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSetting", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserStat", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Stats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUpgrade", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("Upgrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleAccess", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.User", "User")
                        .WithMany("VehicleAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.Vehicle", "Vehicle")
                        .WithMany("VehicleAccesses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEngine", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Vehicle", null)
                        .WithMany("VehicleEngines")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleFuel", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Vehicle", "Vehicle")
                        .WithMany("Fuels")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehiclePartDamage", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Vehicle", "Vehicle")
                        .WithMany("PartDamages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUpgrade", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.Vehicle", "Vehicle")
                        .WithMany("Upgrades")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Fraction", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Group", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Inventory", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("DailyVisits");

                    b.Navigation("DiscordIntegration");

                    b.Navigation("Discoveries");

                    b.Navigation("FractionMembers");

                    b.Navigation("GroupMembers");

                    b.Navigation("Inventories");

                    b.Navigation("JobStatistics");

                    b.Navigation("JobUpgrades");

                    b.Navigation("Licenses");

                    b.Navigation("Rewards");

                    b.Navigation("Settings");

                    b.Navigation("Stats");

                    b.Navigation("Upgrades");

                    b.Navigation("VehicleAccesses");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.Vehicle", b =>
                {
                    b.Navigation("Fuels");

                    b.Navigation("PartDamages");

                    b.Navigation("Upgrades");

                    b.Navigation("VehicleAccesses");

                    b.Navigation("VehicleEngines");
                });
#pragma warning restore 612, 618
        }
    }
}
