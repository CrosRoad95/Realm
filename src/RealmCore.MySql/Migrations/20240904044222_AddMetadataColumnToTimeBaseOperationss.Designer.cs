// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealmCore.MySql;

#nullable disable

namespace RealmCore.Persistence.MySql.Migrations
{
    [DbContext(typeof(MySqlDb))]
    [Migration("20240904044222_AddMetadataColumnToTimeBaseOperationss")]
    partial class AddMetadataColumnToTimeBaseOperationss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.BlockedUserData", b =>
                {
                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId1", "UserId2");

                    b.HasIndex("UserId2");

                    b.ToTable("BlockedUsers", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscordIntegrationData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("UserId");

                    b.ToTable("DiscordIntegrations", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscoveryData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DiscoveryId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DiscoveryId");

                    b.ToTable("Discoveries", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.FriendData", b =>
                {
                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId1", "UserId2");

                    b.HasIndex("UserId2");

                    b.ToTable("Friends", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte?>("Kind")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Shortcut")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Shortcut")
                        .IsUnique();

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupEventData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int?>("GroupDataId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupDataId");

                    b.ToTable("GroupsEvents", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupJoinRequestData", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsJoinRequests", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupMemberData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsMembers", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupRoleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsRoles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupRolePermissionData", b =>
                {
                    b.Property<int>("GroupRoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("GroupRoleId", "PermissionId");

                    b.ToTable("GroupsRolesPermissions", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupSettingData", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GroupId", "SettingId");

                    b.ToTable("GroupsSettings", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasPrecision(38, 18)
                        .HasColumnType("decimal(38,18)");

                    b.HasKey("Id");

                    b.ToTable("Inventories", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryItemData", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<uint>("ItemId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("MetaData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Number")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryItems", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobStatisticsData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("JobId")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<ulong>("Points")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TimePlayed")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("UserId", "JobId", "Date");

                    b.ToTable("JobPoints", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobUpgradeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<short>("JobId")
                        .HasColumnType("smallint");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "JobId", "UpgradeId");

                    b.ToTable("JobUpgrades", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.NewsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.NewsTagData", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("NewsId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NewsTags", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.OpinionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OpinionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Opinions", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.PendingFriendRequestData", b =>
                {
                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId1", "UserId2");

                    b.HasIndex("UserId2");

                    b.ToTable("PendingFriendsRequests", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.RatingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.RoleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TagData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Input")
                        .HasColumnType("longtext");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<string>("Output")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("TimeBaseOperations", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationGroupData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TimeBaseOperationsGroups", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationGroupUserData", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeBaseOperationsGroupsUsers", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UploadFileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("Size")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UploadFiles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserAchievementData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PrizeReceivedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "AchievementId");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserActiveBoostData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ActivatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BoostId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveBoosts", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserBanData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Responsible")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<string>("Serial")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Bans", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserBoostData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Boosts", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserDailyTaskProgressData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DailyTaskId")
                        .HasColumnType("int");

                    b.Property<float>("Progress")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDailyTasksProgressData", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserDailyVisitsData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int>("VisitsInRow")
                        .HasColumnType("int");

                    b.Property<int>("VisitsInRowRecord")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("DailyVisits", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("Experience")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastIp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastNewsReadDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastSerial")
                        .HasColumnType("longtext");

                    b.Property<string>("LastTransformAndMotion")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<uint>("Level")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Nick")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("PlayTime")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("QuickLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("RegisterIp")
                        .HasColumnType("longtext");

                    b.Property<string>("RegisterSerial")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RegisteredDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<short>("Skin")
                        .HasColumnType("smallint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserEventData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserGtaStatData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("UserId", "StatId");

                    b.ToTable("UserGtaStats", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserInventoryData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("UserInventories", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLicenseData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SuspendedUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "LicenseId");

                    b.ToTable("UserLicenses", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLoginHistoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistory", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserNotificationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserPlayTimeData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Category");

                    b.ToTable("UsersPlayTimes", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserRewardData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RewardId");

                    b.ToTable("UserRewards", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSecretsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SecretId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSecrets", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSettingData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "SettingId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserStatData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StatId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("UserId", "StatId");

                    b.ToTable("UserStats", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUpgradeData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UpgradeId");

                    b.ToTable("UserUpgrades", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUploadFileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UploadFileId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UploadFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUploadFiles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserWhitelistedSerialData", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Serial")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("UserId", "Serial");

                    b.ToTable("UserWhitelistedSerials", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("{\"Color1\":\"White\",\"Color2\":\"White\",\"Color3\":\"White\",\"Color4\":\"White\",\"HeadLightColor\":\"White\"}");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DamageState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasDefaultValue("{\"FrontLeftPanel\":0,\"FrontRightPanel\":0,\"RearLeftPanel\":0,\"RearRightPanel\":0,\"Windscreen\":0,\"FrontBumper\":0,\"RearBumper\":0,\"Hood\":0,\"Trunk\":0,\"FrontLeftDoor\":0,\"FrontRightDoor\":0,\"RearLeftDoor\":0,\"RearRightDoor\":0,\"FrontLeftLight\":0,\"FrontRightLight\":0,\"RearRightLight\":0,\"RearLeftLight\":0}");

                    b.Property<string>("DoorOpenRatio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("{\"Hood\":0.0,\"Trunk\":0.0,\"FrontLeft\":0.0,\"FrontRight\":0.0,\"RearLeft\":0.0,\"RearRight\":0.0}");

                    b.Property<bool>("EngineState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<float>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1000f);

                    b.Property<bool>("IsFrozen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRemoved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<byte>("Kind")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("LandingGearDown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<float>("Mileage")
                        .HasColumnType("float");

                    b.Property<ushort>("Model")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("OverrideLights")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("Paintjob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)3);

                    b.Property<string>("Platetext")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("SirensState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Spawned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("TaxiLightState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TransformAndMotion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasDefaultValue("{\"Position\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Rotation\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Interior\":0,\"Dimension\":0,\"Velocity\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"AngularVelocity\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0}}");

                    b.Property<string>("Variant")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("{\"Variant1\":255,\"Variant2\":255}");

                    b.Property<string>("WheelStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("{\"FrontLeft\":0,\"RearLeft\":0,\"FrontRight\":0,\"RearRight\":0}");

                    b.HasKey("Id");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEngineData", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<short>("EngineId")
                        .HasColumnType("smallint");

                    b.Property<bool>("Selected")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("VehicleId", "EngineId");

                    b.ToTable("VehicleEngines", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEventData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<string>("Metadata")
                        .HasColumnType("longtext");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEvents", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleFuelData", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<short>("FuelType")
                        .HasMaxLength(16)
                        .HasColumnType("smallint");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<float>("FuelConsumptionPerOneKm")
                        .HasColumnType("float");

                    b.Property<float>("MaxCapacity")
                        .HasColumnType("float");

                    b.Property<float>("MinimumDistanceThreshold")
                        .HasColumnType("float");

                    b.HasKey("VehicleId", "FuelType");

                    b.ToTable("VehicleFuels", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleInventoryData", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "InventoryId");

                    b.HasIndex("InventoryId");

                    b.ToTable("VehicleInventories", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehiclePartDamageData", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<short>("PartId")
                        .HasColumnType("smallint");

                    b.Property<float>("State")
                        .HasColumnType("float");

                    b.HasKey("VehicleId", "PartId");

                    b.ToTable("VehiclePartDamages", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUpgradeData", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "UpgradeId");

                    b.ToTable("VehicleUpgrades", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUserAccessData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("AccessType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("CustomValue")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleUserAccess", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.WorldNodeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MetaData")
                        .HasColumnType("longtext");

                    b.Property<string>("Transform")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasDefaultValue("{\"Position\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Rotation\":{\"X\":0.0,\"Y\":0.0,\"Z\":0.0},\"Interior\":0,\"Dimension\":0}");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.HasKey("Id");

                    b.ToTable("WorldNodes", (string)null);
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.WorldNodeScheduledActionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorldNodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorldNodeId");

                    b.ToTable("WorldNodeScheduledActionsData", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.RoleData", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.RoleData", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.BlockedUserData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User1")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscordIntegrationData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithOne("DiscordIntegration")
                        .HasForeignKey("RealmCore.Persistence.Data.DiscordIntegrationData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.DiscoveryData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Discoveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.FriendData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupEventData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupData", null)
                        .WithMany("Events")
                        .HasForeignKey("GroupDataId");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupJoinRequestData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupData", "Group")
                        .WithMany("JoinRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("GroupsJoinRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupMemberData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupData", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.GroupRoleData", "Role")
                        .WithMany("Members")
                        .HasForeignKey("RoleId");

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupRoleData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupData", "Group")
                        .WithMany("Roles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupRolePermissionData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupRoleData", "GroupRole")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupSettingData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.GroupData", null)
                        .WithMany("Settings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryItemData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.InventoryData", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobStatisticsData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("JobStatistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.JobUpgradeData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("JobUpgrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.NewsTagData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.NewsData", "News")
                        .WithMany("NewsTags")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.TagData", "Tag")
                        .WithMany("NewsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.OpinionData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("Opinions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.PendingFriendRequestData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.RatingData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.TimeBaseOperationGroupData", "Group")
                        .WithMany("Operations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationGroupUserData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.TimeBaseOperationGroupData", "Group")
                        .WithMany("GroupUserOperations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("TimeBaseOperations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserAchievementData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Achievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserActiveBoostData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("ActiveBoosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserBanData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "ResponsibleUser")
                        .WithMany("ResponsibleBans")
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserBoostData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Boosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserDailyTaskProgressData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("DailyTasksProgress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserDailyVisitsData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithOne("DailyVisits")
                        .HasForeignKey("RealmCore.Persistence.Data.UserDailyVisitsData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserEventData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserGtaStatData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("GtaSaStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserInventoryData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.InventoryData", "Inventory")
                        .WithMany("UserInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("UserInventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLicenseData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Licenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserLoginHistoryData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("LoginHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserNotificationData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserPlayTimeData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("PlayTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserRewardData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSecretsData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Secrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserSettingData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserStatData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Stats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUpgradeData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserUploadFileData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UploadFileData", "UploadFile")
                        .WithMany("UserUploadFiles")
                        .HasForeignKey("UploadFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("UploadFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserWhitelistedSerialData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", null)
                        .WithMany("WhitelistedSerials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEngineData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.VehicleData", null)
                        .WithMany("VehicleEngines")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleEventData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.VehicleData", null)
                        .WithMany("VehicleEvents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleFuelData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.VehicleData", null)
                        .WithMany("Fuels")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleInventoryData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.InventoryData", "Inventory")
                        .WithMany("VehicleInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.VehicleData", "Vehicle")
                        .WithMany("VehicleInventories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehiclePartDamageData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.VehicleData", null)
                        .WithMany("PartDamages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUpgradeData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.VehicleData", null)
                        .WithMany("Upgrades")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleUserAccessData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.UserData", "User")
                        .WithMany("VehicleUserAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealmCore.Persistence.Data.VehicleData", "Vehicle")
                        .WithMany("UserAccesses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.WorldNodeScheduledActionData", b =>
                {
                    b.HasOne("RealmCore.Persistence.Data.WorldNodeData", "WorldNode")
                        .WithMany("ScheduledActionData")
                        .HasForeignKey("WorldNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorldNode");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupData", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("JoinRequests");

                    b.Navigation("Members");

                    b.Navigation("Roles");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.GroupRoleData", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.InventoryData", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("UserInventories");

                    b.Navigation("VehicleInventories");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.NewsData", b =>
                {
                    b.Navigation("NewsTags");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TagData", b =>
                {
                    b.Navigation("NewsTags");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.TimeBaseOperationGroupData", b =>
                {
                    b.Navigation("GroupUserOperations");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UploadFileData", b =>
                {
                    b.Navigation("UserUploadFiles");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.UserData", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("ActiveBoosts");

                    b.Navigation("Bans");

                    b.Navigation("BlockedUsers");

                    b.Navigation("Boosts");

                    b.Navigation("DailyTasksProgress");

                    b.Navigation("DailyVisits");

                    b.Navigation("DiscordIntegration");

                    b.Navigation("Discoveries");

                    b.Navigation("Events");

                    b.Navigation("GroupMembers");

                    b.Navigation("GroupsJoinRequests");

                    b.Navigation("GtaSaStats");

                    b.Navigation("JobStatistics");

                    b.Navigation("JobUpgrades");

                    b.Navigation("Licenses");

                    b.Navigation("LoginHistory");

                    b.Navigation("Notifications");

                    b.Navigation("Opinions");

                    b.Navigation("PlayTimes");

                    b.Navigation("Ratings");

                    b.Navigation("ResponsibleBans");

                    b.Navigation("Rewards");

                    b.Navigation("Secrets");

                    b.Navigation("Settings");

                    b.Navigation("Stats");

                    b.Navigation("TimeBaseOperations");

                    b.Navigation("Upgrades");

                    b.Navigation("UploadFiles");

                    b.Navigation("UserInventories");

                    b.Navigation("VehicleUserAccesses");

                    b.Navigation("WhitelistedSerials");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.VehicleData", b =>
                {
                    b.Navigation("Fuels");

                    b.Navigation("PartDamages");

                    b.Navigation("Upgrades");

                    b.Navigation("UserAccesses");

                    b.Navigation("VehicleEngines");

                    b.Navigation("VehicleEvents");

                    b.Navigation("VehicleInventories");
                });

            modelBuilder.Entity("RealmCore.Persistence.Data.WorldNodeData", b =>
                {
                    b.Navigation("ScheduledActionData");
                });
#pragma warning restore 612, 618
        }
    }
}
