@inject NavigationManager _navigationManager
@inject EventHub _eventHub
@inject IJSRuntime _jsRuntime

﻿<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _navigationManager.LocationChanged += HandleLocationChanged;
            await _jsRuntime.InvokeVoidAsync("registerCSharpFunction", DotNetObjectReference.Create(this));
        }
    }

    async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var path = _navigationManager.ToBaseRelativePath(e.Location);
        await _eventHub.LocationChanged(path);
    }

    [JSInvokable]
    public void NavigateTo(string path)
    {
        _navigationManager.NavigateTo(path);
    }
}