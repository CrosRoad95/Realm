@using System.Security.Principal
@inherits LayoutComponentBase
@inject RealmServer _realmServer
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationState
@inject IRealmService<IBrowserGuiService> _realmBrowserService
@implements IDisposable

<AuthorizeView>
    <Authorized>
        @if(_player == null)
        {
            <p>Wystąpił nieznany błąd. Wejdź ponownie na serwer. Jesli błąd się powtórzy zgłoś się do administracji.</p> 
        }
        else
        {
            <CascadingValue Value="_player">
                <CascadingValue Value="_player.Gui.Current">
                    @Body
                </CascadingValue>
            </CascadingValue>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = BrowserConstants.QueryParameterName)]
    public string? BrowserKey { get; set; }

    private RealmPlayer? _player;

    private void Ready()
    {
        if (_player == null)
            return;

        _realmBrowserService.Service.RelayPlayerLoggedIn(_player);
        _player.Browser.PathChanged += HandlePathChanged;
    }

    private void HandlePathChanged(string path, bool clientSide)
    {
        if (!clientSide)
            _navigationManager.NavigateTo(path ?? "/");
    }


    public virtual void Dispose()
    {
        if (_player != null)
        {
            _player.Browser.PathChanged -= HandlePathChanged;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationState.GetAuthenticationStateAsync();

        var browserGuiService = _realmServer.GetRequiredService<IBrowserGuiService>();

        if (HttpContext == null)
        {
            var claim = authenticationState.User.FindFirst(x => x.Type == BrowserConstants.ClaimType);
            if(claim != null)
            {
                if (browserGuiService.TryGetPlayerByKey(claim.Value, out var player) && player != null)
                {
                    _player = player;
                    Ready();
                }
                return;
            }
            return;
        }

        if (BrowserKey == null)
            return;

        var claims = new List<Claim>
        {
            new Claim(BrowserConstants.ClaimType, BrowserKey),
        };

        var identity = new ClaimsIdentity(claims, "Cookies");
        var principal = new GenericPrincipal(identity, null);
        if (HttpContext.User.Identity != null && HttpContext.User.Identity.IsAuthenticated)
            await HttpContext.SignOutAsync("Cookies");

        await HttpContext.SignInAsync("Cookies", principal, new AuthenticationProperties
        {
            IsPersistent = true
        });
    }
}