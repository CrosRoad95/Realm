@using System.Security.Principal
@inherits LayoutComponentBase
@inject MtaServer _server
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationState
@inject IBrowserGuiService _realmBrowserService
@implements IDisposable

@if (_player == null)
{
    <p style="color: black">Wystąpił nieznany błąd. Wejdź ponownie na serwer. Jesli błąd się powtórzy zgłoś się do administracji.</p>
}
else
{
    <CascadingValue Value="_player">
        <CascadingValue Value="_player.Gui.Current">
            @Body
        </CascadingValue>
    </CascadingValue>
}

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = BrowserConstants.QueryParameterName)]
    public string? BrowserKey { get; set; }

    private RealmPlayer? _player;

    private void Ready()
    {
        if (_player == null)
            return;

        _player.Browser.PathChanged += HandlePathChanged;
        _player.Browser.RelayReady();
    }

    private void HandlePathChanged(PlayerBrowserFeature playerBrowser, string path)
    {
        _navigationManager.NavigateTo(path ?? "/");
    }

    public virtual void Dispose()
    {
        if (_player != null)
        {
            _player.Browser.PathChanged -= HandlePathChanged;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationState.GetAuthenticationStateAsync();

        var browserGuiService = _server.GetRequiredService<IBrowserGuiService>();

        if (HttpContext == null && BrowserKey != null)
        {
            if (browserGuiService.TryGetPlayerByKey(BrowserKey, out var player) && player != null)
            {
                _player = player;
                Ready();
            }
            else
            {
                ;
            }
            return;
        }
    }
}